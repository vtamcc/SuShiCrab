{"version":3,"sources":["assets/SuShiCarb/scripts/ShuShiCarb.Game.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport ShuShiCarbConveyor from \"./Game/ShuShiCarb.Conveyor\";\nimport ShuShiCarbFood from \"./Game/ShuShiCarb.Food\";\nimport ShuShiCarbPlayer from \"./Game/ShuShiCarb.Player\";\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ShuShiCarbGame extends cc.Component {\n\n    public static instance: ShuShiCarbGame = null;\n    @property(cc.Node)\n    nFood1: cc.Node = null;\n    @property(cc.Node)\n    nFood2: cc.Node = null;\n    @property(cc.Node)\n    nFood3: cc.Node = null;\n    @property(cc.Node)\n    listConveyor: cc.Node[] = [];\n    @property(cc.Prefab)\n    prfOrder: cc.Prefab = null;\n    @property(cc.Label)\n    lbCountDown: cc.Label = null;\n    @property(cc.SpriteFrame)\n    listSpfFood: cc.SpriteFrame [] = [];\n\n    @property(cc.Node)\n    conveyor_1: cc.Node = null;\n    @property(cc.Prefab)\n    prfFood: cc.Prefab = null;\n\n    // LIFE-CYCLE CALLBACKS:\n    data = [0,1,2,3,4,5];\n    playOrders = [];\n\n    indexData = -1;\n\n    numberCountdown = 7;\n    countdownInterval: any = null;\n    isMove  = false;\n    onLoad () {\n        ShuShiCarbGame.instance = this;\n       \n        // this.renderFoodOder();\n        this.randomOrderFood();\n        console.log(this.playOrders);\n        this.renderOrderFood();\n        this.renderFood();\n        //this.conveyor();\n\n    }\n\n    // randomIdFood(arr,count) {\n    //     let idFood = [];\n    //     for(let i = 0; i < count; i++) {\n    //         let randomIndex = Math.floor(Math.random() * arr.length);\n    //         idFood.push(randomIndex);\n    //         arr.splice(randomIndex,1);\n    //     }\n    //     return arr;\n    // }\n    randomOrderFood() {\n        for(let i = 0; i < 3; i++) {\n            let randomIndex = Math.floor(Math.random() * this.data.length);\n            let foodId = this.data[randomIndex];\n            this.playOrders.push(foodId);\n        }\n    }\n\n    renderOrderFood() {\n        this.indexData++\n        for(let i = 0; i < this.playOrders.length; i++) {\n            let prfPlayOrder = cc.instantiate(this.prfOrder).getComponent(ShuShiCarbPlayer)\n\n            prfPlayOrder.setData(this.playOrders[0],this.playOrders[1],this.playOrders[2],this.indexData);\n            this.node.addChild(prfPlayOrder.node);\n        }\n    }\n\n    renderFood() {\n        let itemFood = cc.instantiate(this.prfFood).getComponent(ShuShiCarbFood)\n        itemFood.setData(1);\n        this.conveyor_1.addChild(itemFood.node);\n    }\n    // startCountDown() {\n    //     this.updateCountDown();\n    //     this.countdownInterval = setInterval(() => {\n    //         this.numberCountdown--;\n    //         this.updateCountDown();\n    //         if (this.numberCountdown <= 0) {\n    //             this.stopCountDown();\n    //             this.onCountDownEndGame();\n    //         }\n    //     }, 1000)\n    // }\n\n    // stopCountDown() {\n    //     if (this.countdownInterval) {\n    //         clearInterval(this.countdownInterval);\n    //         this.countdownInterval = null;\n    //     }\n    // }\n\n    // onCountDownEndGame() {\n    //     console.log(\"You Lost\")\n    // }\n    // updateCountDown() {\n    //     this.lbCountDown.string = this.numberCountdown + \" \";\n    // }\n    // renderFoodOder() {\n    //     console.log(this.idOderFood);\n    //     for(let i = 0; i < 3; i++) {\n    //         let pOrder = cc.instantiate(this.prfOrder).getComponent(ShuShiCarbPlayer)\n    //         pOrder.setData(this.idOderFood[i],1);\n    //         this.node.addChild(pOrder.node)\n    //     }\n        \n    // }\n\n    // conveyor() {\n    //    for(let i = 0; i < this.listConveyor.length; i++) {\n    //         let dt = this.listConveyor[i];\n    //         let item = dt.getComponent(ShuShiCarbConveyor).listNodeConveyor_1;\n    //         for(let j = 0; j < item.length; j++) {\n    //             let food = item[j];\n    //             food.getComponent(cc.Sprite).spriteFrame = this.listSpfFood[this.playOrders[j]];\n    //         }\n    //    }\n    // }\n    start () {\n        \n    }\n\n    // update (dt) {}\n}\n"]}